{"version":3,"sources":["components/Input.js","components/ToDoListItem.js","components/ToDoList.js","constants/constants.js","components/Navigation.js","components/ToDoApp.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","value","ToDoListItem","item","editingStatus","doneStatus","key","myKey","id","e","onEditSubmit","onEditingChange","todoContent","checked","handleCheckBoxChange","onClick","onEdit","onDelete","ToDoList","items","map","i","ToDoListItem_ToDoListItem","onDone","TABS","all","completed","remaining","Navigation","href","currentList","setCurrentTab","ToDoApp","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOnChange","setState","currentText","target","handleOnDelete","preventDefault","newToDoList","toConsumableArray","state","todoList","filter","handleOnDone","objectSpread","handleOnEdit","handleOnSubmit","submittedText","trim","Date","now","toString","concat","handleEditChange","filterDisplayList","todoItem","tab","componentDidUpdate","window","localStorage","setItem","JSON","stringify","componentDidMount","storageTodos","getItem","storageTodosArr","parse","clear","inherits","createClass","Fragment","Navigation_Navigation","Input_Input","ToDoList_ToDoList","Component","App","ToDoApp_ToDoApp","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e03d4c9.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n *\n * @param {*} props\n */\nexport const Input = (props) => {\n  return (\n    <form className=\"row no-gutters\" onSubmit={props.onSubmit}>\n      <div className=\"col col-sm col-md col-lg col-xl\">\n        <input\n          type={props.type}\n          placeholder={props.placeholder}\n          className=\"form-control\"\n          onChange={props.onChange}\n          value={props.value} />\n      </div>\n      <div className=\"col-3 col-sm-3 col-md-3 col-3 col-xl-3\">\n        <button className=\"btn btn-primary width-90\">Add</button>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\n\n/**\n *\n * @param {*} props\n */\nexport const ToDoListItem = (props) => {\n  if(props.item.editingStatus) {\n    return (\n      <li\n        className={props.item.doneStatus ? 'done_task_item list-group-item' : 'list-group-item'}\n        key={'item_' + props.myKey}\n        id={props.item.id}>\n        <form\n          className='row'\n          onSubmit={ (e) => props.onEditSubmit(props.item.id, e) }>\n          <div className=\"col col-sm col-md col-lg col-xl no-padding\">\n            <input\n              className='form-control'\n              type='text'\n              onChange={ (e) => props.onEditingChange(props.item.id, e) }\n              value={props.item.todoContent} />\n          </div>\n          <div className='col-4 col-sm-4 col-md-3 col-lg-3 col-xl-3'>\n            <button className='btn btn-primary width-100'>Submit</button>\n          </div>\n        </form>\n      </li>\n    );\n  } else {\n    return (\n      <li\n        className={props.item.doneStatus ? 'done_task_item list-group-item' : 'list-group-item'}\n        key={'item_' + props.myKey}>\n        <div className=\"row\">\n          <div className='col-7 col-sm-8 col-md-9 col-lg-9 col-xl-9 align_left'>\n            <input\n              type='checkbox'\n              className=\"col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1\"\n              checked={props.item.doneStatus ? 'checked' : ''}\n              onChange={ (e) => props.handleCheckBoxChange(props.item.id, e)}\n              id={'input_' + props.myKey} />\n            <label\n              className={props.item.doneStatus ? 'done_task_text col-10 col-sm-10 col-md-10 col-lg-10 col-xl-10' : 'col-10 col-sm-10 col-md-10 col-lg-10 col-xl-10'}>{props.item.todoContent}</label>\n          </div>\n          <div className='col-5 col-sm-4 col-md-3 col-lg-3 col-xl-3'>\n            <button className=\"btn btn-primary width-45\" onClick={ (e) => props.onEdit(props.item.id, e) }><i className=\"fas fa-pen-nib\"></i></button>\n            <button className=\"btn btn-danger width-45\" onClick={ (e) => props.onDelete(props.item.id, e) }><i className=\"fas fa-times\"></i></button>\n          </div>\n        </div>\n      </li>\n    );\n  }\n\n};\n","import React from 'react';\nimport { ToDoListItem } from './ToDoListItem';\n\nexport /**\n *\n *\n * @param {*} props\n */\nconst ToDoList = (props) =>\n  (\n    <ul className='list-group list-group-flush'>\n      {props.items.map((item, i) => {\n\n        return (\n          <ToDoListItem\n            item={item}\n            key={i}\n            myKey={i}\n            handleCheckBoxChange={props.handleCheckBoxChange}\n            onEditingChange={props.onEditingChange}\n            onDelete={props.onDelete}\n            onDone={props.onDone}\n            onEdit={props.onEdit}\n            onEditSubmit={props.onEditSubmit} />);\n      }\n      )}\n    </ul>\n  );\n\n","export const ALL_TODOS = 0;\nexport const COMPLETED_TODOS = 1;\nexport const REMAINING_TODOS = 2;\n\nexport const TABS = {\n  all: 'all',\n  completed: 'completed',\n  remaining: 'remaining'\n};\n","import React from 'react';\nimport { TABS } from '../constants/constants';\n\n/**\n *\n * @param {*} props\n */\nexport const Navigation = (props) =>\n  (\n    <ul className=\"nav nav-fill nav-tabs\">\n      <li className='nav-item'>\n        <a href='/'\n          className={props.currentList === TABS.all ? 'nav-link active' : 'nav-link'}\n          onClick={ (e) => props.setCurrentTab(e, TABS.all) }>All</a>\n      </li>\n      <li className='nav-item'>\n        <a href='/'\n          className={props.currentList === TABS.completed ? 'nav-link active' : 'nav-link'}\n          onClick={ (e) => props.setCurrentTab(e, TABS.completed) }>Completed</a>\n      </li>\n      <li className='nav-item'>\n        <a href='/' className={props.currentList === TABS.remaining ? 'nav-link active' : 'nav-link'}\n          onClick={ (e) => props.setCurrentTab(e, TABS.remaining) }>Remaining</a>\n      </li>\n    </ul>\n  );\n","import '../App.css';\nimport { Input } from './Input';\nimport { ToDoList } from './ToDoList';\nimport React, { Component } from 'react';\nimport { Navigation } from './Navigation';\nimport { TABS } from '../constants/constants';\n\n/**\n * Containing class component for the app. Renders all other components by passing down its state as props.\n */\nexport class ToDoApp extends Component {\n\n  /**\n   * Constructor for ToDoApp class component.\n   *\n   * @param   {Object}  props  Props here.\n   *\n   * @returns  {void} Return here.\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentText: '',\n      todoList: [],\n      currentList: TABS.all\n    };\n  }\n\n  /**\n   * Handles changing values on 'Add New TODO' input field.\n   *\n   * @param {Event} e\n   * @memberof ToDoApp\n   */\n  handleOnChange = (e) => {\n    this.setState({\n      currentText: e.target.value\n    });\n  }\n\n  /**\n   * Handles deleting item from the list when delete button is pressed.\n   *\n   * @param {String} id\n   * @param {Event} e\n   * @memberof ToDoApp\n   */\n  handleOnDelete = (id, e) => {\n    e.preventDefault();\n    const newToDoList = [...this.state.todoList].filter( item => item.id !== id);\n\n    this.setState({\n      todoList: newToDoList\n    });\n  }\n\n  /**\n   * Handles the checbox checked/unchecked states.\n   *\n   * @param {String} id\n   * @param {Event} e\n   * @memberof ToDoApp\n   */\n  handleOnDone = (id, e) => {\n    // e.preventDefault();\n\n    const newToDoList = this.state.todoList.map( (item) => {\n      if(item.id === id) {\n        return { ...item, doneStatus: !item.doneStatus };\n      }\n\n      return { ...item }; // Needs spread operator?\n    });\n\n    this.setState({\n      todoList: newToDoList\n    });\n  }\n\n  /**\n   * Toggles the edit status when edit button is clicked.\n   *\n   * @param {String} id\n   * @param {Event} e\n   * @memberof ToDoApp\n   */\n  handleOnEdit = (id, e) => {\n\n    e.preventDefault();\n    const newToDoList = this.state.todoList.map( (item) => {\n      if(item.id === id) {\n        return { ...item, editingStatus: !item.editingStatus };\n      }\n\n      return { ...item };\n    });\n\n    this.setState({\n      todoList: newToDoList\n    });\n  }\n\n  /**\n   * Handles creating new todo when new todo is submitted.\n   *\n   * @param {Event} e\n   * @memberof ToDoApp\n   */\n  handleOnSubmit = (e) => {\n\n    e.preventDefault();\n    const submittedText = this.state.currentText;\n\n    if(submittedText.trim() !== '') {\n      const newToDoObj = {\n        todoContent: submittedText,\n        doneStatus: false,\n        editingStatus: false,\n        id: Date.now().toString()\n      };\n      const newToDoList = [ newToDoObj, ...this.state.todoList ];\n\n      this.setState({\n        todoList: newToDoList,\n        currentText: ''\n      });\n    }\n\n  }\n\n  /**\n   * Handles the checbox checked/unchecked states. Passes the event 'e' to handleOnDone function.\n   *\n   * @param {String} id\n   * @param {Event} e\n   * @memberof ToDoApp\n   */\n  handleCheckBoxChange = (id, e) => {\n    this.handleOnDone(id, e);\n  }\n\n  /**\n   * Handles changing values in the edit input field when in editStatus is true.\n   *\n   * @param {String} id\n   * @param {Event} e\n   * @memberof ToDoApp\n   */\n  handleEditChange = (id, e) => {\n    e.preventDefault();\n\n    const newToDoList = this.state.todoList.map( (item) => {\n      if(item.id === id) {\n        return { ...item, todoContent: e.target.value };\n      }\n\n      return { ...item };\n    });\n\n    this.setState({\n      todoList: newToDoList\n    });\n  }\n\n\n  /**\n   * Handles setting the todo item's new value when submitted on edit input field.\n   *\n   * @param {String} id\n   * @param {Event} e\n   * @memberof ToDoApp\n   */\n  onEditSubmit = (id, e) => {\n\n    e.preventDefault();\n    const newToDoList = this.state.todoList.map( (item) => {\n      if(item.id === id) {\n        return { ...item, editingStatus: !item.editingStatus }; // Accessing DOM ??\n      }\n\n      return { ...item };\n    });\n\n    this.setState({\n      todoList: newToDoList\n    });\n\n  }\n\n  /**\n   * Filters the list to be displayed according to currentList(all,completed, remaining) value.\n   *\n   * @returns {Array}\n   * @memberof ToDoApp\n   */\n  filterDisplayList = () => {\n    switch(this.state.currentList) {\n      case TABS.all:\n        return this.state.todoList;\n      case TABS.completed:\n        return this.state.todoList.filter( todoItem => todoItem.doneStatus );\n      case TABS.remaining:\n        return this.state.todoList.filter( todoItem => !todoItem.doneStatus );\n      default:\n        return this.state.todoList;\n    }\n  }\n\n  /**\n   * Handles changing currentList's value when tabs on the navigation are clicked.\n   *\n   * @param {Event} e Value of pressed tab (all, completed, remaining).\n   * @param {Tab} tab\n   * @memberof ToDoApp\n   */\n  setCurrentTab = (e, tab) => {\n    e.preventDefault();\n    this.setState({\n      currentList: tab\n    });\n  }\n\n  /**\n   * Store the todoList array to local storage on each component update.\n   *\n   * @memberof ToDoApp\n   */\n  componentDidUpdate = () => {\n    window.localStorage.setItem('storageTodos', JSON.stringify(this.state.todoList));\n  }\n\n  /**\n   * Gets todoList from local storage and sets the state with that value.\n   *\n   * @memberof ToDoApp\n   */\n  componentDidMount = () => {\n    const storageTodos = window.localStorage.getItem('storageTodos');\n    const storageTodosArr = storageTodos ? JSON.parse(storageTodos) : [];\n\n    window.localStorage.clear();\n    this.setState( {\n      todoList: storageTodosArr\n    });\n  }\n\n  /**\n   * Renders the ToDoApp.\n   *\n   * @returns {Fragment}\n   * @memberof ToDoApp\n   */\n  render() {\n\n    return (\n      <>\n        <h1><a href='/'>Todo App</a></h1>\n\n        <Navigation\n          setCurrentTab= {this.setCurrentTab}\n          currentList={this.state.currentList} />\n\n        <Input\n          value={this.state.currentText}\n          type='text'\n          placeholder=\"Add New TODO\"\n          onChange={this.handleOnChange}\n          onSubmit={this.handleOnSubmit}/>\n\n        <ToDoList\n          handleCheckBoxChange={this.handleCheckBoxChange}\n          items={this.filterDisplayList()}\n          onDelete={this.handleOnDelete}\n          onDone={this.handleOnDone}\n          onEdit={this.handleOnEdit}\n          onEditingChange={this.handleEditChange}\n          onEditSubmit={this.onEditSubmit} />\n      </>\n    );\n  }\n\n}\n","import './App.css';\nimport React, { Component } from 'react';\nimport { ToDoApp } from './components/ToDoApp';\n\n/**\n *\n *\n * @class App\n * @extends {Component}\n */\nclass App extends Component {\n\n  /**\n   *\n   *\n   * @returns\n   * @memberof App\n   */\n  render() {\n    return (\n      <div className='App container'>\n        <ToDoApp />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './index.css';\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}